package com.homeservices.service.order;

import java.net.URI;
import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import com.homeservices.custom_exceptions.ResourceNotFoundException;
import com.homeservices.dao.OrderRepository;
import com.homeservices.dto.request.OrderRequestDto;
import com.homeservices.dto.response.ApiResponse;
import com.homeservices.entities.Order;
import com.homeservices.utils.OrderStatus;

@Service
public class OrderServiceImpl implements OrderService {
	
	private OrderRepository orderRepo;

	public Order createOrder(OrderRequestDto dto) {
		return null;
	}

	@Override
	public Optional<Order> getOrderById(Long id) {
		// TODO Auto-generated method stub
		return Optional.empty();
	}

	@Override
	public Optional<Order> getOrdersByUserId(Long id) {
		// TODO Auto-generated method stub
		return Optional.empty();
	}

	@Override
	public List getOrdersByPartnerId(Long id) {
		// TODO Auto-generated method stub
		return Optional.empty();
	}

	@Override
	public ApiResponse updateOrderStatus(Long id) {
		Order order = orderRepo.findById(id).
				orElseThrow(()-> new ResourceNotFoundException("Order Not Found"));
		
		if(order.getOrderStatus().equals(OrderStatus.PENDING)) {
			order.setOrderStatus(OrderStatus.CONFIRMED);
		}else if(order.getOrderStatus().equals(OrderStatus.CONFIRMED)) {
			order.setOrderStatus(OrderStatus.IN_PROGRESS);
		}else if(order.getOrderStatus().equals(OrderStatus.IN_PROGRESS)) {
			order.setOrderStatus(OrderStatus.COMPLETED);
		}
		
		orderRepo.save(order);
		return new ApiResponse("Order Status Updated");
	}

	@Override
	public ApiResponse cancelOrderById(Long id) {
		Order order = orderRepo.findById(id).
				orElseThrow(()-> new ResourceNotFoundException("Order Not Found"));
		order.setOrderStatus(OrderStatus.CANCELLED);
		orderRepo.save(order);
		return new ApiResponse("Order Cancelled");
	}
	
}
