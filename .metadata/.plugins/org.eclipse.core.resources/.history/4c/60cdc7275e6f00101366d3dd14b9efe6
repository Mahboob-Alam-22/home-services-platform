package com.homeservices.controller.order;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.homeservices.dto.request.OrderRequestDto;
import com.homeservices.entities.Order;
import com.homeservices.service.order.OrderService;



@RestController
@RequestMapping("/order")
public class OrderController {
	private OrderService orderService;
	
//	POST   /api/orders                           → Create a new order
	@PostMapping
	public ResponseEntity<?> createOrder(@RequestBody OrderRequestDto dto){
		Order order = orderService.createOrder(dto);
		return ResponseEntity.status(HttpStatus.CREATED).body(order);
	}
	
//	GET    /api/orders/{id}                      → Get order by ID
	@GetMapping("/{id}")
	public ResponseEntity<?> getOrderById(@PathVariable int id){
		return ResponseEntity.ok(orderService.getOrderById(id));
	}
//	GET    /api/orders/user/{userId}             → Get all orders by user
	@GetMapping("/user/id")
	public ResponseEntity<?> getOrdersByUserId(@PathVariable int id){
		return ResponseEntity.ok(orderService.getOrderByUserId(id));
	}
//	GET    /api/orders/partner/{partnerId}       → Get all orders by partner
	@GetMapping("/partner/id")
	public ResponseEntity<?> getOrdersByPartnerId(@PathVariable int id){
		return ResponseEntity.ok(orderService.getOrdersByPartnerId(id));
	}
//	PUT    /api/orders/{id}/status               → Update order status
	@PutMapping("/{id}/status")
	public ResponseEntity<String> updateOrderStatus(@PathVariable int id){
		return ResponseEntity.ok(orderService.updateOrderStatus(id));
	}
//	DELETE /api/orders/{id}                      → Cancel order
	@DeleteMapping("/{id}")
	public ResponseEntity<String> cancelOrder(@PathVariable int id){
		return ResponseEntity.ok(orderService.cancelOrderById(id));
	}


}
