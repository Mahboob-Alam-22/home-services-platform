package com.homeservices.service.order;

import java.net.URI;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import com.homeservices.custom_exceptions.ResourceNotFoundException;
import com.homeservices.dao.OrderRepository;
import com.homeservices.dao.PartnerRepository;
import com.homeservices.dao.UserRepository;
import com.homeservices.dto.request.OrderRequestDto;
import com.homeservices.dto.response.ApiResponse;
import com.homeservices.entities.Order;
import com.homeservices.entities.Partner;
import com.homeservices.entities.User;
import com.homeservices.utils.OrderStatus;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class OrderServiceImpl implements OrderService {
	
	private OrderRepository orderRepo;
	private PartnerRepository partnerRepo;
	private UserRepository userRepo;
	private ModelMapper modelMapper;
	
	@Override
	public ApiResponse createOrder(OrderRequestDto dto, Long serviceId) {
		Order order = modelMapper.map(dto, Order.class);
		//Todo : getting userId from token
		
		
//		order.setUser(user);
		order.setOrderStatus(OrderStatus.PENDING);
		order.setServiceDate(dto.serviceDate());
		order.setServiceTime(dto.serviceTime());
//		order.setTotalCost();
		orderRepo.save(order);
		return new ApiResponse("Order Created Successfully");
	}

	@Override
	public Order getOrderById(Long id) {
		Order order = orderRepo.findById(id).orElseThrow(()-> new ResourceNotFoundException("Order Not Found"));
		return order;
	}

	@Override
	public List<Order> getOrdersByUserId(Long id) {
		User user = userRepo.findById(id).orElseThrow(()-> new ResourceNotFoundException("User Not Found"));
		List<Order> orders = orderRepo.findByUser(user);
		if(orders.isEmpty()) {
			throw new ResourceNotFoundException("Orders Not Found");
		}
		return orders;
	}

	@Override
	public List<Order> getOrdersByPartnerId(Long id) {
		Partner partner = partnerRepo.findById(id).orElseThrow(()-> new ResourceNotFoundException("Partner Not Found"));
		List<Order> orders = orderRepo.findByPartner(partner);
		if(orders.isEmpty()) {
			throw new ResourceNotFoundException("Orders Not Found");
		}
		return orders;
	}

	@Override
	public ApiResponse updateOrderStatus(Long id) {
		Order order = orderRepo.findById(id).
				orElseThrow(()-> new ResourceNotFoundException("Order Not Found"));
		
		if(order.getOrderStatus().equals(OrderStatus.PENDING)) {
			order.setOrderStatus(OrderStatus.CONFIRMED);
		}else if(order.getOrderStatus().equals(OrderStatus.CONFIRMED)) {
			order.setOrderStatus(OrderStatus.IN_PROGRESS);
		}else if(order.getOrderStatus().equals(OrderStatus.IN_PROGRESS)) {
			order.setOrderStatus(OrderStatus.COMPLETED);
			order.setCompletionDate(LocalDate.now());
		}
		
		orderRepo.save(order);
		return new ApiResponse("Order Status Updated");
	}

	@Override
	public ApiResponse cancelOrderById(Long id) {
		Order order = orderRepo.findById(id).
				orElseThrow(()-> new ResourceNotFoundException("Order Not Found"));
		System.out.println("ORDER "+ order);
		order.setOrderStatus(OrderStatus.CANCELLED);
		orderRepo.save(order);
		return new ApiResponse("Order Cancelled");
	}
	
}
